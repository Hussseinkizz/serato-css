@use 'sass:math';
@use '../utilities/utilities.scss' as *;
@use '../utilities/media-queries' as *;

// * Container
:where(.container) {
  display: block;
  width: 100%;
  max-width: map-get($breakpoints-map, $lg);

  padding: $default-padding;
  @include center-with-margin;
}

:where(.container-fluid) {
  @include center-with-margin;
  display: flex;
  flex-direction: column;

  min-width: 100%;
  flex: 1 1 100%;

  padding: $default-padding;
}

// * Grids
$total-columns: 12; // per grid row!

:where(.grid-columns) {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  gap: $gap-1;
  width: 100%;
}

@for $i from 1 through $total-columns {
  :where(.grid-column-#{$i}) {
    flex: 0 0 math.div(100%, $total-columns) * $i;
  }
}

// if we're at a breakpoint, generate respective grid column!
@each $breakpoint, $value in $breakpoints-alias {
  @include breakpoint(#{$value}) {
    @for $i from 1 through $total-columns {
      :where(.grid-column-#{$i}-on-#{$breakpoint}) {
        width: math.div(100%, math.div($total-columns, $i));
        padding: $default-padding;
      }
    }
  }
}

// * Flex
:where(.flex) {
  display: flex;
  gap: $gap-1;
}

:where(.flex-all-center) {
  display: flex;
  gap: $gap-1;
  justify-content: center;
  align-items: center;
}

$flex-direction-values: (row, row-reverse, column, column-reverse);
$flex-wrap-values: (nowrap, wrap, wrap-reverse);
$justify-content-values: (
  flex-start,
  flex-end,
  center,
  space-between,
  space-around,
  space-evenly,
  start,
  end,
  left,
  right
);

$align-content-values: (
  flex-start,
  flex-end,
  center,
  space-between,
  space-around,
  space-evenly,
  stretch,
  start,
  end,
  baseline
);
$align-items-values: (
  stretch,
  flex-start,
  flex-end,
  center,
  baseline,
  start,
  end,
  self-start,
  self-end
);
$align-self-values: (auto, flex-start, flex-end, center, baseline, stretch);
$flex-operators: (grow, shrink);

@each $flex-direction-value in $flex-direction-values {
  :where(.flex-#{$flex-direction-value}) {
    flex-direction: $flex-direction-value;
    display: flex;
    gap: $gap-1;
  }
}
@each $flex-wrap-value in $flex-wrap-values {
  :where(.flex-#{$flex-wrap-value}) {
    flex-wrap: $flex-wrap-value;
  }
}

// -> Doing the justify and align content stlyes manually for better developer experience based helper classes
// @each $justify-content-value in $justify-content-values {
//   .justify-content-#{$justify-content-value} {
//     justify-content: $justify-content-value;
//   }
// }

// -> Manual justify-content styles start...
:where(.justify-content-flex-start) {
  justify-content: flex-start;
}

:where(.justify-content-flex-end) {
  justify-content: flex-end;
}

:where(.justify-content-center) {
  justify-content: center;
}

:where(.justify-content-between) {
  justify-content: space-between;
}

:where(.justify-content-around) {
  justify-content: space-around;
}

:where(.justify-content-evenly) {
  justify-content: space-evenly;
}

:where(.justify-content-start) {
  justify-content: start;
}

:where(.justify-content-end) {
  justify-content: end;
}

:where(.justify-content-left) {
  justify-content: left;
}

:where(.justify-content-right) {
  justify-content: right;
}

// -> Manual align-content styles start...

// @each $align-content-value in $align-content-values {
//   .align-content-#{$align-content-value} {
//     align-content: $align-content-value;
//   }
// }
:where(.align-content-flex-start) {
  align-content: flex-start;
}

:where(.align-content-flex-end) {
  align-content: flex-end;
}

:where(.align-content-center) {
  align-content: center;
}

:where(.align-content-between) {
  align-content: space-between;
}

:where(.align-content-around) {
  align-content: space-around;
}

:where(.align-content-evenly) {
  align-content: space-evenly;
}

:where(.align-content-stretch) {
  align-content: stretch;
}

:where(.align-content-start) {
  align-content: start;
}

:where(.align-content-end) {
  align-content: end;
}

:where(.align-content-baseline) {
  align-content: baseline;
}

// -> Manual align-content styles ends...

@each $align-items-value in $align-items-values {
  :where(.align-items-#{$align-items-value}) {
    align-items: $align-items-value;
  }
}

@each $align-self-value in $align-self-values {
  :where(.align-self-#{$align-self-value}) {
    align-self: $align-self-value;
  }
}

// flex grow and flex shrink
@each $flex-operator in $flex-operators {
  @for $i from 0 through 5 {
    :where(.flex-#{$flex-operator}-#{$i}) {
      flex-#{$flex-operator}: $i;
    }
  }
}

// generate gap helpers
@each $name, $gap-value in $gap-values {
  :where(.flex-gap-#{$name}) {
    gap: $gap-value;
  }
}

// flex basis helpers
:where(.flex-basis-1) {
  flex-basis: 1;
}
:where(.flex-basis-0) {
  flex-basis: 0;
}
:where(.flex-basis-auto) {
  flex-basis: auto;
}
:where(.flex-basis-full) {
  flex-basis: 100%;
}
