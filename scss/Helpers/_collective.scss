// All non-categorized utilities go here...
@use '../utilities/global-variables' as *;
@use '../utilities/mixins' as *;
@forward '../animations/native-animations';
@use '../themes/colors/color-variables' as *;
@use '../themes/colors/openprop-colors' as *;
@use '../themes/colors/serato-colors' as *;

// float & clear
.clearfix {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}

.float-left {
  float: left;
}

.float-right {
  float: right;
}
// -> float styles end

.shadow-none {
  box-shadow: none;
}

.is-clickable {
  cursor: pointer;
  pointer-events: all;
}

.overflow {
  overflow: hidden;
}

img,
picture,
video {
  aspect-ratio: auto;
  max-width: 100%;
  height: auto;
}

// width helpers
.width-auto {
  width: $width-auto;
}
.width-none {
  width: $width-none;
}
.width-content {
  width: $width-content;
}
.width-small {
  width: $width-small;
}
.width-normal {
  width: $width-normal;
}
.width-medium {
  width: $width-medium;
}
.width-full {
  max-width: $width-full;
}
.width-viewport {
  max-width: $width-viewport;
}
// height helpers
.height-auto {
  height: $height-auto;
}
.height-none {
  height: $height-none;
}
.height-content {
  height: $height-content;
}
.height-small {
  height: $height-small;
}
.height-normal {
  height: $height-normal;
}
.height-medium {
  height: $height-medium;
}
.height-full {
  min-height: $height-full;
}
.height-viewport {
  min-height: $height-viewport;
}

// generate aspect-ratio helpers
@each $name, $ratio in $ratios {
  .aspect-ratio-#{$name} {
    aspect-ratio: $ratio;
  }
}

// object fit helpers
.object-fit-none {
  object-fit: none;
}
.object-fit-cover {
  object-fit: cover;
}
.object-fit-contain {
  object-fit: contain;
}
.object-fit-fill {
  object-fit: fill;
}
.object-fit-scale-down {
  object-fit: scale-down;
}

// opacity helpers

// generate opacity helpers
@each $name, $opacity in $opacities {
  .opacity-#{$name} {
    opacity: $opacity;
  }

  // on-hover
  .opacity-#{$name}-on-hover:hover {
    transition: $transition-opacity;
    opacity: $opacity;
  }
}

// transition helpers
.transition-normal {
  transition: $default-transition;
}
.transition-colors {
  transition: $transition-colors;
}
.transition-linear {
  transition: $transition-linear;
}
.transition-smooth {
  transition: $transition-smooth;
}
.transition-opacity {
  transition: $transition-opacity;
}
.transition-height {
  transition: $transition-height;
}
.transition-width {
  transition: $transition-width;
}

// list helpers
.list--hoverable > * {
  color: $primary;
  list-style-type: circle;
  @include space-on-hover;

  &:hover,
  &:active,
  &:focus {
    // transition: $transition-colors;
    color: $primary-hover;
  }
}

// spacing between list items, to list without space-on-hover effect
.list li:not(:last-child) {
  margin-bottom: $gap-00;
}

@each $name, $list-style in $list-styles {
  :where(.list-style-#{$list-style}) {
    list-style-type: $list-style;
  }
}

// * shadow helpers
@each $shadowName, $shadow in $shadows {
  :where(.#{$shadowName}) {
    box-shadow: $shadow;
  }
  // for hover states
  :where(.#{$shadowName}--on-hover):hover {
    transition: $transition-smooth;
    box-shadow: $shadow;
  }
}
// * inner shadow helpers
@each $innerShadowName, $inner-shadow in $inner-shadows {
  :where(.#{$innerShadowName}) {
    box-shadow: $inner-shadow;
  }
  // for hover states
  :where(.#{$innerShadowName}--on-hover):hover {
    transition: $transition-smooth;
    box-shadow: $inner-shadow;
  }
}

// * Border Helpers
.border-none {
  border: none;
}
:where(.border) {
  border: $default-borderWidth solid $color-current;
}

// for hover usecase
:where(.border--on-hover):hover {
  transition: $default-transition;
  border: $border-size-1 solid $color-current;
}

// border styles
.border-style-none {
  border-style: none;
}

@each $name, $border-style in $border-styles {
  :where(.border-style-#{$border-style}) {
    border-style: $border-style;
  }
}

// generate border widths
@each $name, $border-size in $border-sizes {
  :where(.#{$name}) {
    border-width: $border-size;
  }
}

:where(.border-color-auto) {
  border-color: auto;
}

// for hover usecase
:where(.border-color--on-hover):hover {
  transition: $default-transition;
  border-color: auto;
}

:where(.border-color-current) {
  border-color: $color-current;
}
:where(.border-color-parent) {
  border-color: $color-parent;
}
:where(.border-color-transparent) {
  border-color: $color-transparent;
}

// generate border colors from gray shades eg. border-color-gray-100
.border-color-gray {
  border-color: $gray;
}

@each $name, $gray-shade in $gray-shades {
  :where(.border-color-#{$name}) {
    border-color: $gray-shade;
  }
}

// generate border colors from theme colors eg. border-color-warning
@each $name, $color in $theme-colors {
  :where(.border-color-#{$name}) {
    border-color: $color;
  }
}

// generate border-radius classes
.radius-none {
  border-radius: 0;
}
// radius-1, radius-round
@each $name, $radius in $border-radii {
  :where(.#{$name}) {
    border-radius: $radius;
  }
  // border-radius-top
  :where(.#{$name}-top) {
    border-top-left-radius: $radius;
    border-top-right-radius: $radius;
  }
  // border-radius-bottom
  :where(.#{$name}-bottom) {
    border-bottom-left-radius: $radius;
    border-bottom-right-radius: $radius;
  }

  // border-radius specific for top-left
  :where(.#{$name}-top-left) {
    border-top-left-radius: $radius;
  }
  // border-radius specific for top-right
  :where(.#{$name}-top-right) {
    border-top-right-radius: $radius;
  }
  // border-radius specific for bottom-left
  :where(.#{$name}-bottom-left) {
    border-bottom-left-radius: $radius;
  }
  // border-radius specific for bottom-right
  :where(.#{$name}-bottom-right) {
    border-bottom-right-radius: $radius;
  }
}

// radius blobs
@each $name, $radius-blob in $radii-blobs {
  :where(.#{$name}) {
    border-radius: $radius-blob;
  }
}

// * Z Index Helpers
@each $name, $layer in $layers {
  :where(.#{$name}) {
    z-index: $layer;
  }
}

// * Ratio Helpers
@each $name, $ratio in $ratios {
  :where(.#{$name}) {
    aspect-ratio: $ratio;
  }
}

// * Typography
// Font Families
:where(.font-sans) {
  font-family: $font-sans;
}
:where(.font-serif) {
  font-family: $font-serif;
}
:where(.font-mono) {
  font-family: $font-mono;
}

// Font Weights
@each $name, $weight in $font-weights {
  :where(.#{$name}) {
    font-weight: $weight;
  }
}

// Font Spacings
@each $name, $font-spacing in $font-spacings {
  :where(.#{$name}) {
    letter-spacing: $font-spacing;
  }
}

// Font Heights
@each $name, $font-height in $font-heights {
  :where(.#{$name}) {
    line-height: $font-height;
  }
}

// Font Sizes
@each $name, $font-size in $font-sizes {
  :where(.#{$name}) {
    font-size: $font-size;
  }
}

// Font Sizes fluid
:where(.font-fluid-0) {
  font-size: $font-fluid-0;
}
:where(.font-fluid-1) {
  font-size: $font-fluid-1;
}
:where(.font-fluid-2) {
  font-size: $font-fluid-2;
}
:where(.font-fluid-3) {
  font-size: $font-fluid-3;
}

// * Sizes
// relative sizes
@each $name, $size in $sizes {
  :where(.block-#{$name}) {
    block-size: $size;
  }
  :where(.inline-#{$name}) {
    inline-size: $size;
  }
}

// icon sizes
:where(.icon-size-sm) {
  inline-size: $size-2;
  block-size: $size-2;
}
:where(.icon-size) {
  inline-size: $size-3;
  block-size: $size-3;
}
:where(.icon-size-lg) {
  inline-size: $size-4;
  block-size: $size-4;
}

// fluid sizes
@each $name, $fluid-size in $sizes-fluid {
  :where(.block-#{$name}) {
    block-size: $fluid-size;
  }
  :where(.inline-#{$name}) {
    inline-size: $fluid-size;
  }
}

// content sizes
@each $name, $size-content in $sizes-content {
  :where(.#{$name}) {
    max-inline-size: $size-content;
  }
}

// header sizes
@each $name, $size-header in $sizes-header {
  :where(.#{$name}) {
    max-inline-size: $size-header;
  }
}

// link helpers
a.link {
  color: $primary;
  width: $width-content;
}
a.link-default {
  color: $primary;
  width: $width-content;
}
a.link--no-underline {
  color: $primary;
  width: $width-content;
}

.link {
  font-style: italic;
  text-underline-offset: 5px;
  @extend .underline-from-center;

  &:hover,
  &:active,
  &:focus {
    transition: $transition-colors;
    color: $primary-hover;
  }
}

.link-default {
  font-style: italic;
  text-underline-offset: 5px;
}

.link--no-underline {
  font-style: italic;

  &:hover,
  &:active,
  &:focus {
    transition: $transition-colors;
    color: $primary-hover;
    text-decoration: none;
  }
}

// selection disabled helper class
.selection-disabled {
  @include selection-disabled;
}

// * icons
:where(.icon) {
  font-size: inherit; // inherit size
  color: $color-current;
}
