/* Media Queries */

// breakpoints for varied device viewports, based on open prop breakpoints!
$xxs: 240px; // watch
$xs: 360px; // mini phone
$sm: 480px; // phone
$md: 768px; // tablet
$lg: 1024px; // notebook or something like
$xl: 1440px; // laptop???
$xxl: 1920px; // desktop & HD Displays

// We should be able to refer to these breakpoints using common rather easy to grasp aliases despite the common xs-xxl stuff.
// breakpoints aliases
$breakpoints-alias: (
  'watch': $xxs,
  'mini-phone': $xs,
  'phone': $sm,
  'tablet': $md,
  'notebook': $lg,
  'laptop': $xl,
  'desktop': $xxl,
);

// Note that for the max values we subtract 0.02px. As adapted from the Bootstrap docs, this is because:
// Browsers donâ€™t currently support range context queries, so we work around the limitations of min- and max- prefixes and viewports with fractional widths (which can occur under certain conditions on high-dpi devices, for instance) by using values with higher precision.

$breakpoints: (
  xxs: (
    min: 240px,
    max: 239.98px,
  ),
  xs: (
    min: 360px,
    max: 359.98px,
  ),
  sm: (
    min: 480px,
    max: 479.98px,
  ),
  md: (
    min: 768px,
    max: 767.98px,
  ),
  lg: (
    min: 1024px,
    max: 1023.98px,
  ),
  xl: (
    min: 1440px,
    max: 1439.98px,
  ),
  xxl: (
    min: 1920px,
    max: 1919.98px,
  ),
);

// mapping out the breakpoints
$breakpoints-map: (
  'xxs': $xxs,
  'xs': $xs,
  'sm': $sm,
  'md': $md,
  'lg': $lg,
  'xl': $xl,
  'xxl': $xxl,
);

// breakpoints mixin!
@mixin breakpoint($breakpoint, $direction: min) {
  //check if the supplied breakpoint exists in our breakpoints map
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-values: map-get($breakpoints, $breakpoint);
    $breakpoint-min: map-get($breakpoint-values, min);
    $breakpoint-max: map-get($breakpoint-values, max);

    //check if we are writing styles for larger or smaller screens
    @if $direction == min {
      @media (min-width: $breakpoint-min) {
        @content;
      }
    } @else {
      @media (max-width: $breakpoint-max) {
        @content;
      }
    }

    // use the custom value if the breakpoint is not part of the pre-defined list
  } @else {
    @if $direction == min {
      @media (min-width: $breakpoint) {
        @content;
      }
    } @else {
      @media (max-width: $breakpoint) {
        @content;
      }
    }
  }
}

// extra large device special mixin
@mixin media-xl {
  @media screen and (min-width: $xl) {
    @content;
  }
}

// usage example

// //styling a button following a mobile-first approach

// .button {
//   width: 100%;

//   @include breakpoint(sm) {
//     width: 50%;
//   }

//   @include breakpoint(lg) {
//     width: 200px;
//   }
// }

// //alternatively, you can use it to style smaller screens

// .button {
//   width: 200px;

//   @include breakpoint(md, max) {
//     width: 100%;
//   }

//   // or use a custom value

//   @include breakpoint(400px, max) {
//     width: 50%;
//   }
// }
